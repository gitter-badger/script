#!/usr/bin/env expect
# bootable-usb.exp
# Author: Andy Bettisworth
# Description: Create a bootable USB with your preferred *nix flavour ISO

set timeout -1
set device [lindex $argv 0]
set iso [lindex $argv 1]

proc usage {} {
  send_error "Usage: bootable-usb.exp \[options\] DEVICE ISO\n"
  exit 1
}

proc exit_if_not_file { target } {
  if { ![file exists $target] } {
    send_error "No such file found for $target"
    exit 2
  }
}

proc exit_if_not_device { device } {
  if { [file type $device] != "blockSpecial" } {
    send_error "Missing block device argument"
    exit 3
  }
}

proc exit_if_not_enough_space { device iso } {
  set partition_table [exec sudo fdisk -l $device]
  regexp {total\s(\d*)} $partition_table -> sector_count
  regexp {\(logical/physical\):\s(\d*)} $partition_table -> sector_size

  set device_size [expr "$sector_count * $sector_size"]
  set iso_size [file size $iso]

  set remainder [expr "$device_size - $iso_size"]

  if {$remainder <= 0} {
    send_error "Not enough space on device $device"
    exit 4
  }
}

proc get_mount_point { device } {
  regexp {\/dev\/(\w*)} $device -> mount_point
  return $mount_point
}

proc get_sector_count { mount_point } {
  set partition_table [exec sudo fdisk -l /dev/$mount_point]
  regexp {total\s(\d*)} $partition_table -> sector_count
  return $sector_count
}

proc get_persistence_percentage {} {
  puts "What percentage should go towards persistence? \[0..40\]"
  expect_user -re "(.*)\n"
  return $expect_out(1,string)
}

proc get_secondary_sectors { sector_count persistence } {
  set sectors [format {%0.0f} [expr $sector_count * ( $persistence / 100.0 )]]
  return $sectors
}

proc get_primary_sectors { sector_count secondary_sectors } {
  set sectors [format {%0.0f} [expr ($sector_count - 1) - $secondary_sectors]]
  return $sectors
}

proc unmount_device { mount_point } {
  set device_tree [exec lsblk]
  set match_tuple [regexp -all -inline "$mount_point\(\\d\)" $device_tree]
  set match_count [expr {[llength $match_tuple] / 2}]

  foreach {group0 group1} $match_tuple {
    if {[catch {exec sudo umount /dev/$group0} fid]} {
      puts "Unmounted partition at /dev/$group0"
    }
  }
}

proc partition_device { mount_point primary_sectors secondary_sectors } {
  spawn sudo fdisk /dev/$mount_point
  expect "?assword*: " {
    expect_user "*\n" { send $expect_out(0,string) }
  }

  if { $secondary_sectors == 0 } {
    send_user "Creating single partition on /dev/$mount_point...\n"

    ## "o\nn\np\n1\n\n\na\n1\nw\n"
    log_user 0
    expect "?ommand*: " { send "o\r" }
    expect "?ommand*: " { send "n\r" }
    expect "?elect*: " { send "p\r" }
    expect "?artition number*: " { send "1\r" }
    expect "?irst sector*: " { send "\r" }
    expect "?ast sector*: " { send "\r" }
    expect "?ommand*: " { send "a\r" }
    expect "?artition number*: " { send "1\r" }
    expect "?ommand*: " { send "w\r" }
    exec sync
    log_user 1

    send_user "Successful partitioning of $mount_point\n"
  } else {
    send_user "Creating partitions on /dev/$mount_point...\n"

    ## "o\nn\np\n1\n\n$primary_sectors\nn\np\n2\n\n\na\n1\nw\n"
    log_user 0
    expect "?ommand*: " { send "o\r" }
    expect "?ommand*: " { send "n\r" }
    expect "?elect*: " { send "p\r" }
    expect "?artition number*: " { send "1\r" }
    expect "?irst sector*: " { send "\r" }
    expect "?ast sector*: " { send "$primary_sectors\r" }
    expect "?ommand*: " { send "n\r" }
    expect "?elect*: " { send "p\r" }
    expect "?artition number*: " { send "2\r" }
    expect "?irst sector*: " { send "\r" }
    expect "?ast sector*: " { send "\r" }
    expect "?ommand*: " { send "a\r" }
    expect "?artition number*: " { send "1\r" }
    expect "?ommand*: " { send "w\r" }
    exec sync
    log_user 1

    send_user "Successful partitioning of $mount_point\n"
  }
}

proc format_partition { mount_point secondary_sectors } {
  if { $secondary_sectors == 0 } {
    send_user "Formatting /dev/${mount_point}1 NTFS...\n"

    exec sudo mkntfs -L Village /dev/${mount_point}1
    exec sync
  } else {
    send_user "Formatting /dev/${mount_point}1 NTFS and /dev/${mount_point}2 ext4...\n"

    exec sudo mkntfs -L Village /dev/${mount_point}1
    exec sudo mkfs.ext4 -L casper-rw /dev/${mount_point}2
    exec sync
  }
}

proc extract_iso { iso } {
  send_user "Mounting ISO...\n"

  if {[catch {exec sudo rm -r /mnt/tmpiso} fid]} {
  }
  exec sudo mkdir -p /mnt/tmpiso
  exec sudo mount -o loop $iso /mnt/tmpiso
}

proc mount_device { mount_point secondary_sectors } {
  if { $secondary_sectors == 0 } {
    exec sudo mkdir -p /media/raist/Village
    exec sudo mount /dev/${mount_point}1 /media/raist/Village
  } else {
    exec sudo mkdir -p /media/raist/Village
    exec sudo mkdir -p /media/raist/casper-rw
    exec sudo mount /dev/${mount_point}1 /media/raist/Village
    exec sudo mount /dev/${mount_point}2 /media/raist/casper-rw
  }
}

proc copy_iso_to_device { mount_point iso } {
  send_user "Extracting ISO files to device...\n"

  exec rsync -apP "/mnt/tmpiso/" /media/raist/Village
  exec sudo unlink /media/raist/Village/ubuntu
  exec sudo umount /mnt/tmpiso
  exec sudo rm -r /mnt/tmpiso
}

proc setup_grub_bootloader {} {
  exec rm /media/raist/Village/boot/grub/loopback.cfg
  exec cp ~/.sync/.preseed/grub.cfg /media/raist/Village/boot/grub/grub.cfg
  exec sudo grub-install --no-floppy --root-directory=/media/raist/Village/ $mount_point
}

if { [string length $device] != 0 && \
     [string length $iso] != 0 } {
  exit_if_not_file $device
  exit_if_not_device $device
  exit_if_not_file $iso
  exit_if_not_enough_space $device $iso

  set mount_point [get_mount_point $device]
  set sector_count [get_sector_count $mount_point]
  set pct [get_persistence_percentage]
  set secondary_sectors [get_secondary_sectors $sector_count $pct]
  set primary_sectors [get_primary_sectors $sector_count $secondary_sectors]

  unmount_device $mount_point
  partition_device $mount_point $primary_sectors $secondary_sectors
  format_partition $mount_point $secondary_sectors

  puts "SUCCESS!"
  # extract_iso $iso
  # mount_device $mount_point $secondary_sectors
  # copy_iso_to_device $mount_point $iso
  # setup_grub_bootloader
  exec sync
} else {
  usage
}
