#!/usr/bin/env expect
# bootable-usb.exp
# Author: Andy Bettisworth
# Description: Create a bootable USB with any *nix flavour ISO

set timeout -1
set device [lindex $argv 0]
set iso [lindex $argv 1]
set user $env(USER)

proc usage {} {
  send_error "Usage: bootable-usb.exp DEVICE ISO\n"
  exit 1
}

proc exit_if_not_file { target } {
  if { ![file exists $target] } {
    send_error "No file found at $target\n"
    exit 2
  }
}

proc exit_if_not_device { device } {
  if { [file type $device] != "blockSpecial" } {
    send_error "No device found at $device\n"
    exit 3
  }
}

proc exit_if_not_enough_space { mount_point primary_sectors iso } {
  set partition_table [exec sudo fdisk -l /dev/$mount_point]
  regexp {\(logical/physical\):\s(\d*)} $partition_table -> sector_size

  set device_size [expr "$primary_sectors * $sector_size"]
  set iso_size [file size $iso]

  set remainder [expr "$device_size - $iso_size"]

  if {$remainder <= 0} {
    set abs_remainder [expr {abs($remainder)}]
    set r_mb [expr "$abs_remainder / 1024 / 1024"]
    send_error "Not enough space on /dev/${mount_point}1 for $iso \nOff by $r_mb MB\n"
    exit 4
  }
}

proc partition_device { mount_point primary_sectors secondary_sectors } {
  spawn sudo fdisk /dev/$mount_point
  expect "?assword*: " {
    expect_user "*\n" { send $expect_out(0,string) }
  }

  if { $secondary_sectors == 0 } {
    send_user "Creating a single partition on /dev/$mount_point...\n"

    ## "o\nn\np\n1\n\n\na\n1\nw\n"
    log_user 0
    expect "?ommand*: " { send "o\r" }
    expect "?ommand*: " { send "n\r" }
    expect "?elect*: " { send "p\r" }
    expect "?artition number*: " { send "1\r" }
    expect "?irst sector*: " { send "\r" }
    expect "?ast sector*: " { send "\r" }
    expect "?ommand*: " { send "a\r" }
    expect "?ommand*: " { send "w\r" }
    exec sync
    log_user 1

    send_user "Successful partitioning of $mount_point.\n"
  } else {
    send_user "Creating dual partitions on /dev/$mount_point...\n"

    ## "o\nn\np\n1\n\n$primary_sectors\nn\np\n2\n\n\na\n1\nw\n"
    log_user 0
    expect "?ommand*: " { send "o\r" }
    expect "?ommand*: " { send "n\r" }
    expect "?elect*: " { send "p\r" }
    expect "?artition number*: " { send "1\r" }
    expect "?irst sector*: " { send "\r" }
    expect "?ast sector*: " { send "$primary_sectors\r" }
    expect "?ommand*: " { send "n\r" }
    expect "?elect*: " { send "p\r" }
    expect "?artition number*: " { send "2\r" }
    expect "?irst sector*: " { send "\r" }
    expect "?ast sector*: " { send "\r" }
    expect "?ommand*: " { send "a\r" }
    expect "?artition number*: " { send "1\r" }
    expect "?ommand*: " { send "w\r" }
    exec sync
    log_user 1

    send_user "Successful partitioning of $mount_point.\n"
  }
}

proc format_partition { mount_point secondary_sectors } {
  if { $secondary_sectors == 0 } {
    send_user "Formatting /dev/${mount_point}1 to NTFS...\n"

    log_user 1
    catch {exec sudo mkntfs -L Village /dev/${mount_point}1}
    log_user 0

    exec sync
  } else {
    send_user "Formatting /dev/${mount_point}1 to NTFS and /dev/${mount_point}2 to ext4...\n"

    log_user 1
    catch {exec sudo mkntfs -L Village /dev/${mount_point}1}
    catch {exec sudo mkfs.ext4 -L casper-rw /dev/${mount_point}2}
    catch {exec sudo parted -s $mount_point set 1 boot on}
    catch {exec sudo parted -s $mount_point set 1 hidden on}
    catch {exec sudo parted -s $mount_point set 2 hidden on}
    log_user 0

    exec sync
  }
}

proc mount_iso { iso_mount iso } {
  send_user "Mounting ISO $iso...\n"

  catch {exec sudo umount $iso_mount}
  catch {exec sudo rm -r $iso_mount}

  exec sudo mkdir -p $iso_mount
  exec sudo mount -o ro,loop $iso $iso_mount
}

proc umount_iso { iso_mount iso } {
  send_user "Unmounting ISO $iso...\n"

  catch {exec sudo umount $iso_mount}
  catch {exec sudo rm -r $iso_mount}
}

proc mount_device { user mount_point secondary_sectors } {
  if { $secondary_sectors == 0 } {
    catch {exec sudo umount /media/$user/Village}
    catch {exec sudo rm -r /media/$user/Village}

    exec sudo mkdir -p /media/$user/Village
    exec sudo mount /dev/${mount_point}1 /media/$user/Village
  } else {
    catch {exec sudo umount /media/$user/Village}
    catch {exec sudo rm -r /media/$user/Village}
    catch {exec sudo umount /media/$user/casper-rw}
    catch {exec sudo rm -r /media/$user/casper-rw}

    exec sudo mkdir -p /media/$user/Village
    exec sudo mkdir -p /media/$user/casper-rw
    exec sudo mount /dev/${mount_point}1 /media/$user/Village
    exec sudo mount /dev/${mount_point}2 /media/$user/casper-rw
  }
}

proc umount_device { user mount_point } {
  set match_tuple [regexp -all -inline "$mount_point\(\\d\)" [exec lsblk]]
  set match_count [expr {[llength $match_tuple] / 2}]

  foreach {group0 group1} $match_tuple {
    catch {exec sudo umount /dev/$group0}
  }

  catch {exec sudo umount /media/$user/Village}
  catch {exec sudo rm -r /media/$user/Village}
  catch {exec sudo umount /media/$user/casper-rw}
  catch {exec sudo rm -r /media/$user/casper-rw}
}

proc copy_iso_to_device { user mount_point iso } {
  send_user "Extracting ISO files to device...\n"

  log_user 1
  exec rsync -aP "/mnt/tmpiso/" /media/$user/Village
  log_user 0

  exec sudo unlink /media/$user/Village/ubuntu
  exec sudo rm /media/$user/Village/boot/grub/loopback.cfg
}

proc setup_grub_bootloader { user mount_point } {
  catch {exec sudo grub-install --no-floppy --root-directory=/media/$user/Village/ /dev/$mount_point}
}

proc add_preseed_config { user } {
  set menu /media/$user/Village/boot/grub/grub.cfg
  set usb_preseed /media/$user/Village/preseed
  set github_path /home/$user/GitHub

  if { [file exists $github_path] } {
    exec cp -f $github_path/seed/grub.cfg $menu
    exec cp $github_path/seed/solace.seed $usb_preseed
    exec cp $github_path/seed/init.sh $usb_preseed
    exec cp -r $github_path/seed $usb_preseed
  } else {
    send_user "WARNING: no preseed files found locally\n"
  }
}

if { [string length $device] != 0 && \
     [string length $iso] != 0 } {
  exit_if_not_file $device
  exit_if_not_device $device
  puts "Device $device found."
  exit_if_not_file $iso
  puts "ISO $iso found."

  regexp {\/dev\/(\w*)} $device -> mount_point
  puts "Getting sector count of /dev/$mount_point..."
  regexp {(\d*?)\ssectors} [exec sudo fdisk -l /dev/$mount_point] -> sector_count
  puts "What percentage should go towards persistence? \[0..40\]"
  expect_user -re "(.*)\n"
  set persistence $expect_out(1,string)

  if { $persistence > 0 } {
    set secondary_sectors [format {%0.0f} [expr $sector_count * ( $persistence / 100.0 )]]
  } else {
    set secondary_sectors 0
  }
  set primary_sectors [format {%0.0f} [expr ($sector_count - 1) - $secondary_sectors]]
  exit_if_not_enough_space $mount_point $primary_sectors $iso
  puts "Primary: $primary_sectors Secondary: $secondary_sectors"

  puts "Unmounting $mount_point..."
  umount_device $user $mount_point
  partition_device $mount_point $primary_sectors $secondary_sectors
  format_partition $mount_point $secondary_sectors

  mount_iso /mnt/tmpiso $iso
  mount_device $user $mount_point $secondary_sectors
  copy_iso_to_device $user $mount_point $iso
  umount_iso /mnt/tmpiso $iso
  setup_grub_bootloader $user $mount_point
  mount_device $user $mount_point $secondary_sectors

  add_preseed_config $user

  umount_device $user $mount_point
  exec sync
} else {
  usage
}
