#!/usr/bin/env expect
# bootable-usb.exp
# Author: Andy Bettisworth
# Description: Create a bootable USB with your preferred *nix flavour ISO

set usage "USAGE: bootable-usb.exp \[options\] DEVICE ISO"

set device [lindex $argv 0]
set iso [lindex $argv 1]

proc exit_if_not_device { device } {
  if { [file type $device] != "blockSpecial" } {
    puts stderr "Missing block device argument"
    exit 3
  }
}

proc exit_if_not_file { iso } {
  if { ![file exists $iso] } {
    puts stderr "Missing ISO file argument"
    exit 3
  }
}

proc exit_if_not_enough_space { device iso } {
  set partition_table [exec sudo fdisk -l $device]
  regexp {total\s(\d*)} $partition_table -> sector_count
  regexp {\(logical/physical\):\s(\d*)} $partition_table -> sector_size

  set device_size [expr "$sector_count * $sector_size"]
  set iso_size [file size $iso]

  set remainder [expr "$device_size - $iso_size"]

  if {$remainder <= 0} {
    puts stderr "Not enough space on device $device"
    exit 4
  }
}

if { [string length $device] != 0 && \
     [string length $iso] != 0} {
  exit_if_not_device $device
  exit_if_not_file $iso
  exit_if_not_enough_space $device $iso

  # > exec cont
} else {
  puts stderr $usage
  exit 2
}

# def build(device, iso, peristence=0, quiet=false)
#   device     = validate_device(device)
#   iso        = validate_iso(iso)
#   peristence = validate_pct(peristence)

#   print_block_devices
#   print_current_tablespace(device)
#   exit unless confirm_operation

#   sectors = get_sector_count(device)

#   secondary_table = (sectors * ( peristence / 100.0 )).to_i
#   primary_table = (sectors - 1) - secondary_table

#   # part_cmd = 'o\nn\np\n1\n\n' + primary_table.to_s + '\n'
#   # part_cmd += 'n\np\n2\n\n\n' if secondary_table != 0
#   # part_cmd += 'w'

#   # puts %Q{echo -e "#{part_cmd}" | sudo fdisk #{device}}
#   # cmd = IO.popen(%Q{echo -e "#{part_cmd}" | sudo fdisk #{device}}).read


#   # cmd = %Q{echo -e "#{part_cmd}" | sudo fdisk #{device}}
#   # if result
#   #   puts 'Sucessful partition'
#   # else
#   #   puts 'Failed partition'
#   # end

#   # ## > format partitions
#   # `sudo mkfs --type ntfs #{device}1`
#   # # `sudo mkfs --type ext4 #{device}2`
#   # /dev/sdX1 ntfs Village    ~80% GiB boot
#   # /dev/sdX2 ext4 casper-rw  ~20% GiB

#   # ## > label partitions
#   # `sudo ntfslabel #{device}1 Village`
#   # # `sudo e2label #{device}2 casper-rw`

#   # ## > Extract ISO
#   # `sudo rm -r /mnt/tmpiso`
#   # `sudo mkdir /mnt/tmpiso`
#   # `sudo mount -o loop #{iso} /mnt/tmpiso`

#   # ## > Copy ISO to Device
#   # ## En handle auto reattch device
#   # `rsync -aP /mnt/tmpiso/* /media/raist/Village`
#   # `sudo unlink /media/raist/Village/ubuntu`
#   # `sudo rm -r /mnt/tmpiso`

#   # ## > Setup GRUB bootloader
#   # `rm /media/raist/Village/boot/grub/loopback.cfg`
#   # `cp ~/.sync/.preseed/grub.cfg /media/raist/Village/boot/grub/grub.cfg`
#   # `sudo grub-install --no-floppy --root-directory=/media/raist/Village/ #{device}`
# end
